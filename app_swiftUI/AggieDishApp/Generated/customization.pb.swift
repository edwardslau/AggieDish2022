// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/model/customization.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Examples: 
/// - FoodProduct "Burger Meal"
///   [
///     {title: "side", minPick: 1, maxPick: 3, CustomizationChoice1},     // customer must choose 1 side and can choose up to 3 sides
///     {title: "drink", minPick: 1, maxPick: 1, CustomizationChoice2},    // customer must choose 1 and only 1 drink
///     {title: "protein", minPick: 0, maxPick: 2, CustomizationChoice3},  // customer can choose up to 2 proteins
///      ...
///   ]
struct Model_Customization {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Title means the general title of the choices. For example, 
  /// if a customer orders a meal, the customization titles can be 
  /// "Select a Side", "Select a Drink", etc.
  var title: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _title ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return self._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {self._title = nil}

  /// This field represents the minimun choice(s) a customer need to 
  /// choose from that customization category. The value should be 
  /// between 0 and the number of items in choice minus 1.
  var minPick: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _minPick ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_minPick = newValue}
  }
  /// Returns true if `minPick` has been explicitly set.
  var hasMinPick: Bool {return self._minPick != nil}
  /// Clears the value of `minPick`. Subsequent reads from it will return its default value.
  mutating func clearMinPick() {self._minPick = nil}

  /// This field represents the maximun choice(s) a customer need to 
  /// choose from that customization category. The value should be 
  /// between 1 and the number of items in choice.
  var maxPick: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _maxPick ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_maxPick = newValue}
  }
  /// Returns true if `maxPick` has been explicitly set.
  var hasMaxPick: Bool {return self._maxPick != nil}
  /// Clears the value of `maxPick`. Subsequent reads from it will return its default value.
  mutating func clearMaxPick() {self._maxPick = nil}

  /// This field include customization choices and corresponding add-on price.
  var choice: [Model_CustomizationChoice] = []

  /// This field indicates whether the customization is optional or required.
  var isOptional: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _isOptional ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_isOptional = newValue}
  }
  /// Returns true if `isOptional` has been explicitly set.
  var hasIsOptional: Bool {return self._isOptional != nil}
  /// Clears the value of `isOptional`. Subsequent reads from it will return its default value.
  mutating func clearIsOptional() {self._isOptional = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _title: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _minPick: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _maxPick: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _isOptional: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "model"

extension Model_Customization: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Customization"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "title"),
    2: .same(proto: "minPick"),
    3: .same(proto: "maxPick"),
    4: .same(proto: "choice"),
    5: .standard(proto: "is_optional"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._title) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._minPick) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._maxPick) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.choice) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._isOptional) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._title {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._minPick {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._maxPick {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.choice.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.choice, fieldNumber: 4)
    }
    try { if let v = self._isOptional {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Model_Customization, rhs: Model_Customization) -> Bool {
    if lhs._title != rhs._title {return false}
    if lhs._minPick != rhs._minPick {return false}
    if lhs._maxPick != rhs._maxPick {return false}
    if lhs.choice != rhs.choice {return false}
    if lhs._isOptional != rhs._isOptional {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
