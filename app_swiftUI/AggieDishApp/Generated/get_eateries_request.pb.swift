// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/get_eateries_request.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Model_GetEateriesRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name (keyword) filter.
  var name: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _name ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  /// Distance filter.
  /// TODO(#66): Implement in VendorServer.java
  var userCoordinates: Google_Type_LatLng {
    get {return _userCoordinates ?? Google_Type_LatLng()}
    set {_userCoordinates = newValue}
  }
  /// Returns true if `userCoordinates` has been explicitly set.
  var hasUserCoordinates: Bool {return self._userCoordinates != nil}
  /// Clears the value of `userCoordinates`. Subsequent reads from it will return its default value.
  mutating func clearUserCoordinates() {self._userCoordinates = nil}

  var maxDistance: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _maxDistance ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_maxDistance = newValue}
  }
  /// Returns true if `maxDistance` has been explicitly set.
  var hasMaxDistance: Bool {return self._maxDistance != nil}
  /// Clears the value of `maxDistance`. Subsequent reads from it will return its default value.
  mutating func clearMaxDistance() {self._maxDistance = nil}

  /// Filter to include eateries with the specified star rating or higher.
  var greaterThanStars: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _greaterThanStars ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_greaterThanStars = newValue}
  }
  /// Returns true if `greaterThanStars` has been explicitly set.
  var hasGreaterThanStars: Bool {return self._greaterThanStars != nil}
  /// Clears the value of `greaterThanStars`. Subsequent reads from it will return its default value.
  mutating func clearGreaterThanStars() {self._greaterThanStars = nil}

  /// Filter to include eateries with the specified star rating or lower.
  var lessThanStars: SwiftProtobuf.Google_Protobuf_DoubleValue {
    get {return _lessThanStars ?? SwiftProtobuf.Google_Protobuf_DoubleValue()}
    set {_lessThanStars = newValue}
  }
  /// Returns true if `lessThanStars` has been explicitly set.
  var hasLessThanStars: Bool {return self._lessThanStars != nil}
  /// Clears the value of `lessThanStars`. Subsequent reads from it will return its default value.
  mutating func clearLessThanStars() {self._lessThanStars = nil}

  /// Phone number filter (exact match).
  var phoneNumber: Google_Type_PhoneNumber {
    get {return _phoneNumber ?? Google_Type_PhoneNumber()}
    set {_phoneNumber = newValue}
  }
  /// Returns true if `phoneNumber` has been explicitly set.
  var hasPhoneNumber: Bool {return self._phoneNumber != nil}
  /// Clears the value of `phoneNumber`. Subsequent reads from it will return its default value.
  mutating func clearPhoneNumber() {self._phoneNumber = nil}

  /// Cuisine filter (disjunctive).
  var cuisine: [Model_Cuisine] = []

  /// Metadata for number of results to return.
  var limit: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _limit ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_limit = newValue}
  }
  /// Returns true if `limit` has been explicitly set.
  var hasLimit: Bool {return self._limit != nil}
  /// Clears the value of `limit`. Subsequent reads from it will return its default value.
  mutating func clearLimit() {self._limit = nil}

  var skip: SwiftProtobuf.Google_Protobuf_Int32Value {
    get {return _skip ?? SwiftProtobuf.Google_Protobuf_Int32Value()}
    set {_skip = newValue}
  }
  /// Returns true if `skip` has been explicitly set.
  var hasSkip: Bool {return self._skip != nil}
  /// Clears the value of `skip`. Subsequent reads from it will return its default value.
  mutating func clearSkip() {self._skip = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _userCoordinates: Google_Type_LatLng? = nil
  fileprivate var _maxDistance: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _greaterThanStars: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _lessThanStars: SwiftProtobuf.Google_Protobuf_DoubleValue? = nil
  fileprivate var _phoneNumber: Google_Type_PhoneNumber? = nil
  fileprivate var _limit: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
  fileprivate var _skip: SwiftProtobuf.Google_Protobuf_Int32Value? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "model"

extension Model_GetEateriesRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetEateriesRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .standard(proto: "user_coordinates"),
    3: .standard(proto: "max_distance"),
    4: .standard(proto: "greater_than_stars"),
    5: .standard(proto: "less_than_stars"),
    6: .standard(proto: "phone_number"),
    7: .same(proto: "cuisine"),
    8: .same(proto: "limit"),
    9: .same(proto: "skip"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._userCoordinates) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._maxDistance) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._greaterThanStars) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._lessThanStars) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._phoneNumber) }()
      case 7: try { try decoder.decodeRepeatedEnumField(value: &self.cuisine) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._limit) }()
      case 9: try { try decoder.decodeSingularMessageField(value: &self._skip) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._userCoordinates {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._maxDistance {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._greaterThanStars {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._lessThanStars {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._phoneNumber {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    if !self.cuisine.isEmpty {
      try visitor.visitPackedEnumField(value: self.cuisine, fieldNumber: 7)
    }
    try { if let v = self._limit {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._skip {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Model_GetEateriesRequest, rhs: Model_GetEateriesRequest) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._userCoordinates != rhs._userCoordinates {return false}
    if lhs._maxDistance != rhs._maxDistance {return false}
    if lhs._greaterThanStars != rhs._greaterThanStars {return false}
    if lhs._lessThanStars != rhs._lessThanStars {return false}
    if lhs._phoneNumber != rhs._phoneNumber {return false}
    if lhs.cuisine != rhs.cuisine {return false}
    if lhs._limit != rhs._limit {return false}
    if lhs._skip != rhs._skip {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
