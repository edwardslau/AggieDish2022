// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/model/payment_info.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Information about an eatery's payment policies.
struct Model_PaymentInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Whether the eatery accepts payment with cash.
  var acceptsCash: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _acceptsCash ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_acceptsCash = newValue}
  }
  /// Returns true if `acceptsCash` has been explicitly set.
  var hasAcceptsCash: Bool {return self._acceptsCash != nil}
  /// Clears the value of `acceptsCash`. Subsequent reads from it will return its default value.
  mutating func clearAcceptsCash() {self._acceptsCash = nil}

  /// Whether the eatery accepts payment with credit card.
  var acceptsCreditCard: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _acceptsCreditCard ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_acceptsCreditCard = newValue}
  }
  /// Returns true if `acceptsCreditCard` has been explicitly set.
  var hasAcceptsCreditCard: Bool {return self._acceptsCreditCard != nil}
  /// Clears the value of `acceptsCreditCard`. Subsequent reads from it will return its default value.
  mutating func clearAcceptsCreditCard() {self._acceptsCreditCard = nil}

  /// Whether the eatery accepts payment with cash-equivalent methods.
  var acceptsCashEquivalent: SwiftProtobuf.Google_Protobuf_BoolValue {
    get {return _acceptsCashEquivalent ?? SwiftProtobuf.Google_Protobuf_BoolValue()}
    set {_acceptsCashEquivalent = newValue}
  }
  /// Returns true if `acceptsCashEquivalent` has been explicitly set.
  var hasAcceptsCashEquivalent: Bool {return self._acceptsCashEquivalent != nil}
  /// Clears the value of `acceptsCashEquivalent`. Subsequent reads from it will return its default value.
  mutating func clearAcceptsCashEquivalent() {self._acceptsCashEquivalent = nil}

  /// A list of mids that represent the cash equivalents accepted by the eatery.
  ///
  /// The value of this field is undefined when accepts_cash_equivalent is not
  /// true, so clients should check that accepts_cash_equivalent is true before
  /// using this field.
  var acceptedCashEquivalentMid: [SwiftProtobuf.Google_Protobuf_Int64Value] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _acceptsCash: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _acceptsCreditCard: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
  fileprivate var _acceptsCashEquivalent: SwiftProtobuf.Google_Protobuf_BoolValue? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "model"

extension Model_PaymentInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PaymentInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "accepts_cash"),
    2: .standard(proto: "accepts_credit_card"),
    3: .standard(proto: "accepts_cash_equivalent"),
    4: .standard(proto: "accepted_cash_equivalent_mid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._acceptsCash) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._acceptsCreditCard) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._acceptsCashEquivalent) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.acceptedCashEquivalentMid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._acceptsCash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._acceptsCreditCard {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._acceptsCashEquivalent {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    if !self.acceptedCashEquivalentMid.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.acceptedCashEquivalentMid, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Model_PaymentInfo, rhs: Model_PaymentInfo) -> Bool {
    if lhs._acceptsCash != rhs._acceptsCash {return false}
    if lhs._acceptsCreditCard != rhs._acceptsCreditCard {return false}
    if lhs._acceptsCashEquivalent != rhs._acceptsCashEquivalent {return false}
    if lhs.acceptedCashEquivalentMid != rhs.acceptedCashEquivalentMid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
