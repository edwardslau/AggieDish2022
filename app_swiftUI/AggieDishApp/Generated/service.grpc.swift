//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: protos/service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate `Model_ServiceClient`, then call methods of this protocol to make API calls.
internal protocol Model_ServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Model_ServiceClientInterceptorFactoryProtocol? { get }

  func addEatery(
    _ request: Model_Eatery,
    callOptions: CallOptions?
  ) -> UnaryCall<Model_Eatery, SwiftProtobuf.Google_Protobuf_Empty>

  func addFoodProduct(
    _ request: Model_AddFoodProductRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Model_AddFoodProductRequest, SwiftProtobuf.Google_Protobuf_Empty>

  func getEateries(
    _ request: Model_GetEateriesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Model_GetEateriesRequest, Model_GetEateriesResponse>

  func getEateryFoodProducts(
    _ request: Model_GetEateryFoodProductsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Model_GetEateryFoodProductsRequest, Model_GetEateryFoodProductsResponse>

  func getFoodProduct(
    _ request: Model_GetFoodProductRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Model_GetFoodProductRequest, Model_GetFoodProductResponse>

  func submitCart(
    _ request: Model_SubmitCartRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Model_SubmitCartRequest, Model_Order>

  func getOrder(
    _ request: Model_GetOrderRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Model_GetOrderRequest, Model_Order>
}

extension Model_ServiceClientProtocol {
  internal var serviceName: String {
    return "model.Service"
  }

  /// development rpcs
  ///
  /// - Parameters:
  ///   - request: Request to send to AddEatery.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addEatery(
    _ request: Model_Eatery,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Model_Eatery, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/model.Service/AddEatery",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddEateryInterceptors() ?? []
    )
  }

  /// Unary call to AddFoodProduct
  ///
  /// - Parameters:
  ///   - request: Request to send to AddFoodProduct.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addFoodProduct(
    _ request: Model_AddFoodProductRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Model_AddFoodProductRequest, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: "/model.Service/AddFoodProduct",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddFoodProductInterceptors() ?? []
    )
  }

  /// db rpcs
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEateries.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getEateries(
    _ request: Model_GetEateriesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Model_GetEateriesRequest, Model_GetEateriesResponse> {
    return self.makeUnaryCall(
      path: "/model.Service/GetEateries",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEateriesInterceptors() ?? []
    )
  }

  /// Unary call to GetEateryFoodProducts
  ///
  /// - Parameters:
  ///   - request: Request to send to GetEateryFoodProducts.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getEateryFoodProducts(
    _ request: Model_GetEateryFoodProductsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Model_GetEateryFoodProductsRequest, Model_GetEateryFoodProductsResponse> {
    return self.makeUnaryCall(
      path: "/model.Service/GetEateryFoodProducts",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetEateryFoodProductsInterceptors() ?? []
    )
  }

  /// Unary call to GetFoodProduct
  ///
  /// - Parameters:
  ///   - request: Request to send to GetFoodProduct.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getFoodProduct(
    _ request: Model_GetFoodProductRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Model_GetFoodProductRequest, Model_GetFoodProductResponse> {
    return self.makeUnaryCall(
      path: "/model.Service/GetFoodProduct",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetFoodProductInterceptors() ?? []
    )
  }

  /// checkout rpcs
  ///
  /// - Parameters:
  ///   - request: Request to send to SubmitCart.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func submitCart(
    _ request: Model_SubmitCartRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Model_SubmitCartRequest, Model_Order> {
    return self.makeUnaryCall(
      path: "/model.Service/SubmitCart",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSubmitCartInterceptors() ?? []
    )
  }

  /// Unary call to GetOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to GetOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getOrder(
    _ request: Model_GetOrderRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Model_GetOrderRequest, Model_Order> {
    return self.makeUnaryCall(
      path: "/model.Service/GetOrder",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetOrderInterceptors() ?? []
    )
  }
}

internal protocol Model_ServiceClientInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when invoking 'addEatery'.
  func makeAddEateryInterceptors() -> [ClientInterceptor<Model_Eatery, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'addFoodProduct'.
  func makeAddFoodProductInterceptors() -> [ClientInterceptor<Model_AddFoodProductRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getEateries'.
  func makeGetEateriesInterceptors() -> [ClientInterceptor<Model_GetEateriesRequest, Model_GetEateriesResponse>]

  /// - Returns: Interceptors to use when invoking 'getEateryFoodProducts'.
  func makeGetEateryFoodProductsInterceptors() -> [ClientInterceptor<Model_GetEateryFoodProductsRequest, Model_GetEateryFoodProductsResponse>]

  /// - Returns: Interceptors to use when invoking 'getFoodProduct'.
  func makeGetFoodProductInterceptors() -> [ClientInterceptor<Model_GetFoodProductRequest, Model_GetFoodProductResponse>]

  /// - Returns: Interceptors to use when invoking 'submitCart'.
  func makeSubmitCartInterceptors() -> [ClientInterceptor<Model_SubmitCartRequest, Model_Order>]

  /// - Returns: Interceptors to use when invoking 'getOrder'.
  func makeGetOrderInterceptors() -> [ClientInterceptor<Model_GetOrderRequest, Model_Order>]
}

internal final class Model_ServiceClient: Model_ServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Model_ServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the model.Service service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Model_ServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Model_ServiceProvider: CallHandlerProvider {
  var interceptors: Model_ServiceServerInterceptorFactoryProtocol? { get }

  /// development rpcs
  func addEatery(request: Model_Eatery, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func addFoodProduct(request: Model_AddFoodProductRequest, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  /// db rpcs
  func getEateries(request: Model_GetEateriesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Model_GetEateriesResponse>

  func getEateryFoodProducts(request: Model_GetEateryFoodProductsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Model_GetEateryFoodProductsResponse>

  func getFoodProduct(request: Model_GetFoodProductRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Model_GetFoodProductResponse>

  /// checkout rpcs
  func submitCart(request: Model_SubmitCartRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Model_Order>

  func getOrder(request: Model_GetOrderRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Model_Order>
}

extension Model_ServiceProvider {
  internal var serviceName: Substring { return "model.Service" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "AddEatery":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Model_Eatery>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAddEateryInterceptors() ?? [],
        userFunction: self.addEatery(request:context:)
      )

    case "AddFoodProduct":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Model_AddFoodProductRequest>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAddFoodProductInterceptors() ?? [],
        userFunction: self.addFoodProduct(request:context:)
      )

    case "GetEateries":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Model_GetEateriesRequest>(),
        responseSerializer: ProtobufSerializer<Model_GetEateriesResponse>(),
        interceptors: self.interceptors?.makeGetEateriesInterceptors() ?? [],
        userFunction: self.getEateries(request:context:)
      )

    case "GetEateryFoodProducts":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Model_GetEateryFoodProductsRequest>(),
        responseSerializer: ProtobufSerializer<Model_GetEateryFoodProductsResponse>(),
        interceptors: self.interceptors?.makeGetEateryFoodProductsInterceptors() ?? [],
        userFunction: self.getEateryFoodProducts(request:context:)
      )

    case "GetFoodProduct":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Model_GetFoodProductRequest>(),
        responseSerializer: ProtobufSerializer<Model_GetFoodProductResponse>(),
        interceptors: self.interceptors?.makeGetFoodProductInterceptors() ?? [],
        userFunction: self.getFoodProduct(request:context:)
      )

    case "SubmitCart":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Model_SubmitCartRequest>(),
        responseSerializer: ProtobufSerializer<Model_Order>(),
        interceptors: self.interceptors?.makeSubmitCartInterceptors() ?? [],
        userFunction: self.submitCart(request:context:)
      )

    case "GetOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Model_GetOrderRequest>(),
        responseSerializer: ProtobufSerializer<Model_Order>(),
        interceptors: self.interceptors?.makeGetOrderInterceptors() ?? [],
        userFunction: self.getOrder(request:context:)
      )

    default:
      return nil
    }
  }
}

internal protocol Model_ServiceServerInterceptorFactoryProtocol {

  /// - Returns: Interceptors to use when handling 'addEatery'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddEateryInterceptors() -> [ServerInterceptor<Model_Eatery, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'addFoodProduct'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddFoodProductInterceptors() -> [ServerInterceptor<Model_AddFoodProductRequest, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getEateries'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetEateriesInterceptors() -> [ServerInterceptor<Model_GetEateriesRequest, Model_GetEateriesResponse>]

  /// - Returns: Interceptors to use when handling 'getEateryFoodProducts'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetEateryFoodProductsInterceptors() -> [ServerInterceptor<Model_GetEateryFoodProductsRequest, Model_GetEateryFoodProductsResponse>]

  /// - Returns: Interceptors to use when handling 'getFoodProduct'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetFoodProductInterceptors() -> [ServerInterceptor<Model_GetFoodProductRequest, Model_GetFoodProductResponse>]

  /// - Returns: Interceptors to use when handling 'submitCart'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSubmitCartInterceptors() -> [ServerInterceptor<Model_SubmitCartRequest, Model_Order>]

  /// - Returns: Interceptors to use when handling 'getOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetOrderInterceptors() -> [ServerInterceptor<Model_GetOrderRequest, Model_Order>]
}
