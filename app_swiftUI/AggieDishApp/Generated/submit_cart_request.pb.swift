// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: protos/submit_cart_request.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Model_SubmitCartRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cart: Model_Cart {
    get {return _cart ?? Model_Cart()}
    set {_cart = newValue}
  }
  /// Returns true if `cart` has been explicitly set.
  var hasCart: Bool {return self._cart != nil}
  /// Clears the value of `cart`. Subsequent reads from it will return its default value.
  mutating func clearCart() {self._cart = nil}

  var userID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _userID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var eateryID: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _eateryID ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_eateryID = newValue}
  }
  /// Returns true if `eateryID` has been explicitly set.
  var hasEateryID: Bool {return self._eateryID != nil}
  /// Clears the value of `eateryID`. Subsequent reads from it will return its default value.
  mutating func clearEateryID() {self._eateryID = nil}

  /// Refer to model.Menu.MenuDay.day for more information.
  var day: SwiftProtobuf.Google_Protobuf_StringValue {
    get {return _day ?? SwiftProtobuf.Google_Protobuf_StringValue()}
    set {_day = newValue}
  }
  /// Returns true if `day` has been explicitly set.
  var hasDay: Bool {return self._day != nil}
  /// Clears the value of `day`. Subsequent reads from it will return its default value.
  mutating func clearDay() {self._day = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cart: Model_Cart? = nil
  fileprivate var _userID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _eateryID: SwiftProtobuf.Google_Protobuf_StringValue? = nil
  fileprivate var _day: SwiftProtobuf.Google_Protobuf_StringValue? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "model"

extension Model_SubmitCartRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitCartRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "cart"),
    2: .standard(proto: "user_id"),
    3: .standard(proto: "eatery_id"),
    4: .same(proto: "day"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._cart) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._userID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._eateryID) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._day) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._cart {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._userID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._eateryID {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._day {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Model_SubmitCartRequest, rhs: Model_SubmitCartRequest) -> Bool {
    if lhs._cart != rhs._cart {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._eateryID != rhs._eateryID {return false}
    if lhs._day != rhs._day {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
